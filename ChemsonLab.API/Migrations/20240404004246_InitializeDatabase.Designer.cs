// <auto-generated />
using System;
using ChemsonLab.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ChemsonLab.API.Migrations
{
    [DbContext(typeof(ChemsonLabDbContext))]
    [Migration("20240404004246_InitializeDatabase")]
    partial class InitializeDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ChemsonLab.API.Models.Domain.Batch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BatchName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("SampleBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Batch");
                });

            modelBuilder.Entity("ChemsonLab.API.Models.Domain.BatchTestResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BatchId")
                        .HasColumnType("int");

                    b.Property<int>("TestResultId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BatchId");

                    b.HasIndex("TestResultId");

                    b.ToTable("BatchTestResult");
                });

            modelBuilder.Entity("ChemsonLab.API.Models.Domain.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("ChemsonLab.API.Models.Domain.CustomerOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.ToTable("CustomerOrder");
                });

            modelBuilder.Entity("ChemsonLab.API.Models.Domain.Evaluation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double?>("Bandwidth")
                        .HasColumnType("double");

                    b.Property<double?>("Energy")
                        .HasColumnType("double");

                    b.Property<string>("FileName")
                        .HasColumnType("longtext");

                    b.Property<int?>("Point")
                        .HasColumnType("int");

                    b.Property<string>("PointName")
                        .HasColumnType("varchar(1)");

                    b.Property<double?>("Speed")
                        .HasColumnType("double");

                    b.Property<double?>("StockTemp")
                        .HasColumnType("double");

                    b.Property<int>("TestResultId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("TimeEval")
                        .HasColumnType("time(6)");

                    b.Property<int?>("TimeEvalInt")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("TimeRange")
                        .HasColumnType("time(6)");

                    b.Property<int?>("TimeRangeInt")
                        .HasColumnType("int");

                    b.Property<double?>("Torque")
                        .HasColumnType("double");

                    b.Property<double?>("TorqueRange")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("TestResultId");

                    b.ToTable("Evaluation");
                });

            modelBuilder.Entity("ChemsonLab.API.Models.Domain.Machine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("Machine");
                });

            modelBuilder.Entity("ChemsonLab.API.Models.Domain.Measurement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<double?>("Bandwidth")
                        .HasColumnType("double");

                    b.Property<string>("FileName")
                        .HasColumnType("longtext");

                    b.Property<double?>("Speed")
                        .HasColumnType("double");

                    b.Property<double?>("StockTemp")
                        .HasColumnType("double");

                    b.Property<int>("TestResultId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("TimeAct")
                        .HasColumnType("time(6)");

                    b.Property<double?>("Torque")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("TestResultId");

                    b.ToTable("Measurement");
                });

            modelBuilder.Entity("ChemsonLab.API.Models.Domain.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool?>("COA")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Colour")
                        .HasColumnType("longtext");

                    b.Property<string>("Comment")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DBDate")
                        .HasColumnType("datetime(6)");

                    b.Property<double?>("FusionFail")
                        .HasColumnType("double");

                    b.Property<double?>("FusionWarning")
                        .HasColumnType("double");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double?>("SampleAmount")
                        .HasColumnType("double");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.Property<double?>("TorqueFail")
                        .HasColumnType("double");

                    b.Property<double?>("TorqueWarning")
                        .HasColumnType("double");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("ChemsonLab.API.Models.Domain.ProductSpecification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool?>("InUse")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("Load")
                        .HasColumnType("int");

                    b.Property<int>("MachineId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("RPM")
                        .HasColumnType("int");

                    b.Property<int?>("Temp")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MachineId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductSpecification");
                });

            modelBuilder.Entity("ChemsonLab.API.Models.Domain.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreateBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("Report");
                });

            modelBuilder.Entity("ChemsonLab.API.Models.Domain.TestResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Additive")
                        .HasColumnType("longtext");

                    b.Property<string>("BatchGroup")
                        .HasColumnType("longtext");

                    b.Property<string>("CodeNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("Colour")
                        .HasColumnType("longtext");

                    b.Property<int?>("Damping")
                        .HasColumnType("int");

                    b.Property<string>("DriveUnit")
                        .HasColumnType("longtext");

                    b.Property<string>("FileName")
                        .HasColumnType("longtext");

                    b.Property<string>("Liquid")
                        .HasColumnType("longtext");

                    b.Property<double?>("LoadSpeed")
                        .HasColumnType("double");

                    b.Property<double?>("LoadTime")
                        .HasColumnType("double");

                    b.Property<string>("LoadingChute")
                        .HasColumnType("longtext");

                    b.Property<int>("MachineId")
                        .HasColumnType("int");

                    b.Property<int?>("MeasRange")
                        .HasColumnType("int");

                    b.Property<string>("Mixer")
                        .HasColumnType("longtext");

                    b.Property<double?>("MixerTemp")
                        .HasColumnType("double");

                    b.Property<string>("OperatorName")
                        .HasColumnType("longtext");

                    b.Property<double?>("PlastWeight")
                        .HasColumnType("double");

                    b.Property<string>("Plasticizer")
                        .HasColumnType("longtext");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<double?>("SampleWeight")
                        .HasColumnType("double");

                    b.Property<double?>("Speed")
                        .HasColumnType("double");

                    b.Property<double?>("StartTemp")
                        .HasColumnType("double");

                    b.Property<bool?>("Status")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("TestDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("TestMethod")
                        .HasColumnType("longtext");

                    b.Property<int?>("TestNumber")
                        .HasColumnType("int");

                    b.Property<double?>("TestTime")
                        .HasColumnType("double");

                    b.Property<string>("TestType")
                        .HasColumnType("longtext");

                    b.Property<double?>("Titrate")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("MachineId");

                    b.HasIndex("ProductId");

                    b.ToTable("TestResult");
                });

            modelBuilder.Entity("ChemsonLab.API.Models.Domain.TestResultReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("BatchTestResultId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("longtext");

                    b.Property<double?>("FusionDiff")
                        .HasColumnType("double");

                    b.Property<int?>("ReportId")
                        .HasColumnType("int");

                    b.Property<bool?>("Result")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("StandardReference")
                        .HasColumnType("longtext");

                    b.Property<double?>("TorqueDiff")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("BatchTestResultId");

                    b.HasIndex("ReportId");

                    b.ToTable("TestResultReport");
                });

            modelBuilder.Entity("ChemsonLab.API.Models.Domain.Batch", b =>
                {
                    b.HasOne("ChemsonLab.API.Models.Domain.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ChemsonLab.API.Models.Domain.BatchTestResult", b =>
                {
                    b.HasOne("ChemsonLab.API.Models.Domain.Batch", "Batch")
                        .WithMany()
                        .HasForeignKey("BatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChemsonLab.API.Models.Domain.TestResult", "TestResult")
                        .WithMany()
                        .HasForeignKey("TestResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Batch");

                    b.Navigation("TestResult");
                });

            modelBuilder.Entity("ChemsonLab.API.Models.Domain.CustomerOrder", b =>
                {
                    b.HasOne("ChemsonLab.API.Models.Domain.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChemsonLab.API.Models.Domain.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ChemsonLab.API.Models.Domain.Evaluation", b =>
                {
                    b.HasOne("ChemsonLab.API.Models.Domain.TestResult", "TestResult")
                        .WithMany()
                        .HasForeignKey("TestResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestResult");
                });

            modelBuilder.Entity("ChemsonLab.API.Models.Domain.Measurement", b =>
                {
                    b.HasOne("ChemsonLab.API.Models.Domain.TestResult", "TestResult")
                        .WithMany()
                        .HasForeignKey("TestResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestResult");
                });

            modelBuilder.Entity("ChemsonLab.API.Models.Domain.ProductSpecification", b =>
                {
                    b.HasOne("ChemsonLab.API.Models.Domain.Machine", "Machine")
                        .WithMany()
                        .HasForeignKey("MachineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChemsonLab.API.Models.Domain.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Machine");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ChemsonLab.API.Models.Domain.TestResult", b =>
                {
                    b.HasOne("ChemsonLab.API.Models.Domain.Machine", "Machine")
                        .WithMany()
                        .HasForeignKey("MachineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChemsonLab.API.Models.Domain.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Machine");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ChemsonLab.API.Models.Domain.TestResultReport", b =>
                {
                    b.HasOne("ChemsonLab.API.Models.Domain.BatchTestResult", "BatchTestResult")
                        .WithMany()
                        .HasForeignKey("BatchTestResultId");

                    b.HasOne("ChemsonLab.API.Models.Domain.Report", "Report")
                        .WithMany()
                        .HasForeignKey("ReportId");

                    b.Navigation("BatchTestResult");

                    b.Navigation("Report");
                });
#pragma warning restore 612, 618
        }
    }
}
